openapi: 3.0.0
info:
  title: Tksha Dating App API
  description: |
    API documentation for Tksha Dating App. This API provides endpoints for user management, 
    profile management, matching, and messaging functionalities.
  version: 1.0.0
  contact:
    name: Tksha Support
    email: support@tksha.com

servers:
  - url: https://tksha.onrender.com/api
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained after login

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        gender:
          type: string
          enum: [male, female]
          example: "male"
        bio:
          type: string
          nullable: true
          example: "I love hiking and outdoor activities."
        profile_picture:
          type: string
          nullable: true
          example: "uploads/profile_pictures/1_1620000000.jpg"
        lat:
          type: number
          format: float
          example: 40.7128
        lng:
          type: number
          format: float
          example: -74.0060
        radius_preference:
          type: integer
          example: 50
        created_at:
          type: string
          format: date-time
          example: "2023-05-01T12:00:00Z"

    Activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Hiking"

    Match:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        matched_user_id:
          type: integer
          format: int64
          example: 2
        matched_user_name:
          type: string
          example: "Jane Smith"
        matched_at:
          type: string
          format: date-time
          example: "2023-05-01T12:00:00Z"

    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        sender_id:
          type: integer
          format: int64
          example: 1
        sender_name:
          type: string
          example: "John Doe"
        content:
          type: string
          example: "Hello, how are you?"
        sent_at:
          type: string
          format: date-time
          example: "2023-05-01T12:00:00Z"
        is_mine:
          type: boolean
          example: true

    PotentialMatch:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: "Jane Smith"
        gender:
          type: string
          enum: [male, female]
          example: "female"
        bio:
          type: string
          nullable: true
          example: "Yoga instructor and book lover."
        profile_picture:
          type: string
          nullable: true
          example: "uploads/profile_pictures/2_1620000000.jpg"
        lat:
          type: number
          format: float
          example: 40.7282
        lng:
          type: number
          format: float
          example: -73.7949
        distance:
          type: number
          format: float
          example: 5.2
        shared_activities:
          type: integer
          example: 3
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error message"

paths:
  /register.php:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with basic profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - gender
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
                gender:
                  type: string
                  enum: [male, female]
                  example: "male"
                bio:
                  type: string
                  example: "I love hiking and outdoor activities."
                lat:
                  type: number
                  format: float
                  example: 40.7128
                lng:
                  type: number
                  format: float
                  example: -74.0060
                address:
                  type: string
                  example: "New York, NY"
                radius_preference:
                  type: integer
                  example: 50
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User was created."
              example:
                message: "User was created."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                emailExists:
                  value:
                    message: "Email already exists."
                incompleteData:
                  value:
                    message: "Unable to create user. Data is incomplete."
                invalidGender:
                  value:
                    message: "Gender must be either 'male' or 'female'."
                missingLocation:
                  value:
                    message: "Location information is required."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to create user."

  /login.php:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and get a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful."
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
              example:
                message: "Login successful."
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  id: 1
                  name: "John Doe"
                  email: "john@example.com"
                  gender: "male"
                  bio: "I love hiking and outdoor activities."
                  profile_picture: "uploads/profile_pictures/1_1620000000.jpg"
                  lat: 40.7128
                  lng: -74.0060
                  radius_preference: 50
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Login failed. Email and password are required."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                userNotFound:
                  value:
                    message: "Login failed. User not found."
                incorrectPassword:
                  value:
                    message: "Login failed. Incorrect password."

  /get_profile.php:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Get profile information for the current user or another user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          description: User ID to get profile for. If not provided, returns the current user's profile.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                name: "John Doe"
                email: "john@example.com"
                gender: "male"
                bio: "I love hiking and outdoor activities."
                profile_picture: "uploads/profile_pictures/1_1620000000.jpg"
                lat: 40.7128
                lng: -74.0060
                radius_preference: 50
                activities:
                  - id: 1
                    name: "Hiking"
                  - id: 5
                    name: "Music"
                  - id: 8
                    name: "Travel"
                created_at: "2023-05-01T12:00:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "User not found."

  /update_profile.php:
    post:
      tags:
        - User Profile
      summary: Update user profile
      description: Update the current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "John Smith"
                bio:
                  type: string
                  example: "Updated bio information."
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile was updated."
                  user:
                    $ref: '#/components/schemas/User'
              example:
                message: "Profile was updated."
                user:
                  id: 1
                  name: "John Smith"
                  email: "john@example.com"
                  gender: "male"
                  bio: "Updated bio information."
                  profile_picture: "uploads/profile_pictures/1_1620000000.jpg"
                  lat: 40.7128
                  lng: -74.0060
                  radius_preference: 50
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to update profile. Name is required."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "User not found."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to update profile."

  /upload_profile_picture.php:
    post:
      tags:
        - User Profile
      summary: Upload profile picture
      description: Upload or update the user's profile picture
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - profile_picture
              properties:
                profile_picture:
                  type: string
                  format: binary
                  description: Profile picture file (JPEG, PNG, or GIF)
      responses:
        '200':
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture was updated."
                  profile_picture:
                    type: string
                    example: "uploads/profile_pictures/1_1620000000.jpg"
                  thumbnail:
                    type: string
                    example: "uploads/profile_pictures/thumbnails/1_1620000000.jpg"
              example:
                message: "Profile picture was updated."
                profile_picture: "uploads/profile_pictures/1_1620000000.jpg"
                thumbnail: "uploads/profile_pictures/thumbnails/1_1620000000.jpg"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                noFile:
                  value:
                    message: "No file uploaded."
                fileSize:
                  value:
                    message: "File is too large. Maximum size is 5MB"
                fileType:
                  value:
                    message: "Invalid file type. Allowed types: JPEG, PNG, GIF"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "User not found."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to update profile picture in database."

  /activities.php:
    get:
      tags:
        - Activities
      summary: Get all activities
      description: Get a list of all available activities
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Activities retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
              example:
                - id: 1
                  name: "Hiking"
                - id: 2
                  name: "Cooking"
                - id: 3
                  name: "Reading"
                - id: 4
                  name: "Movies"
                - id: 5
                  name: "Music"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: No activities found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No activities found."
    post:
      tags:
        - Activities
      summary: Save user activities
      description: Save the current user's selected activities
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - activity_ids
              properties:
                activity_ids:
                  type: array
                  items:
                    type: integer
                    format: int64
                  example: [1, 5, 8]
      responses:
        '200':
          description: Activities saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Activities were saved."
              example:
                message: "Activities were saved."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to save activities. No activity IDs provided."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to save activities."

  /user_activities.php:
    get:
      tags:
        - Activities
      summary: Get user activities
      description: Get the current user's selected activities
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User activities retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
              example:
                - id: 1
                  name: "Hiking"
                - id: 5
                  name: "Music"
                - id: 8
                  name: "Travel"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: No activities found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No activities found for this user."

  /potential_matches.php:
    get:
      tags:
        - Matching
      summary: Get potential matches
      description: Get a list of potential matches based on gender, location, and activities
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Potential matches retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PotentialMatch'
              example:
                - id: 2
                  name: "Jane Smith"
                  gender: "female"
                  bio: "Yoga instructor and book lover."
                  profile_picture: "uploads/profile_pictures/2_1620000000.jpg"
                  lat: 40.7282
                  lng: -73.7949
                  distance: 5.2
                  shared_activities: 3
                  activities:
                    - id: 1
                      name: "Hiking"
                    - id: 3
                      name: "Reading"
                    - id: 5
                      name: "Music"
                    - id: 9
                      name: "Fitness"
                - id: 4
                  name: "Emily Johnson"
                  gender: "female"
                  bio: "Artist and nature enthusiast."
                  profile_picture: "uploads/profile_pictures/4_1620000000.jpg"
                  lat: 40.7500
                  lng: -73.8000
                  distance: 7.8
                  shared_activities: 2
                  activities:
                    - id: 1
                      name: "Hiking"
                    - id: 6
                      name: "Photography"
                    - id: 15
                      name: "Art"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: No potential matches found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No potential matches found."

  /swipe.php:
    post:
      tags:
        - Matching
      summary: Swipe on a user
      description: Record a swipe (like or dislike) on another user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - swiped_id
                - is_like
              properties:
                swiped_id:
                  type: integer
                  format: int64
                  example: 2
                is_like:
                  type: boolean
                  example: true
      responses:
        '201':
          description: Swipe recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Swipe was recorded."
              example:
                message: "Swipe was recorded."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to record swipe. Data is incomplete."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to record swipe."

  /matches.php:
    get:
      tags:
        - Matches
      summary: Get user matches
      description: Get a list of the current user's matches
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Matches retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
              example:
                - id: 1
                  matched_user_id: 2
                  matched_user_name: "Jane Smith"
                  matched_at: "2023-05-01T12:00:00Z"
                - id: 3
                  matched_user_id: 4
                  matched_user_name: "Emily Johnson"
                  matched_at: "2023-05-02T14:30:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '404':
          description: No matches found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No matches found."

  /messages.php:
    get:
      tags:
        - Messaging
      summary: Get messages for a match
      description: Get all messages for a specific match
      security:
        - BearerAuth: []
      parameters:
        - name: match_id
          in: query
          description: Match ID to get messages for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              example:
                - id: 1
                  sender_id: 1
                  sender_name: "John Doe"
                  content: "Hi Jane, how are you?"
                  sent_at: "2023-05-01T12:05:00Z"
                  is_mine: true
                - id: 2
                  sender_id: 2
                  sender_name: "Jane Smith"
                  content: "I'm good, thanks! How about you?"
                  sent_at: "2023-05-01T12:07:00Z"
                  is_mine: false
                - id: 3
                  sender_id: 1
                  sender_name: "John Doe"
                  content: "Doing well! Would you like to meet up sometime?"
                  sent_at: "2023-05-01T12:10:00Z"
                  is_mine: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "You are not authorized to view these messages."
        '404':
          description: No messages found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No messages found."
    post:
      tags:
        - Messaging
      summary: Send a message
      description: Send a message to a match
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - match_id
                - content
              properties:
                match_id:
                  type: integer
                  format: int64
                  example: 1
                content:
                  type: string
                  example: "Hey, would you like to meet for coffee?"
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message was sent."
                  data:
                    $ref: '#/components/schemas/Message'
              example:
                message: "Message was sent."
                data:
                  id: 4
                  sender_id: 1
                  sender_name: "John Doe"
                  content: "Hey, would you like to meet for coffee?"
                  sent_at: "2023-05-01T15:30:00Z"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to send message. Data is incomplete."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "You are not authorized to send messages to this match."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to send message."

  /update_location.php:
    post:
      tags:
        - Location
      summary: Update user location
      description: Update the current user's location
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat:
                  type: number
                  format: float
                  example: 40.7500
                lng:
                  type: number
                  format: float
                  example: -74.0000
                address:
                  type: string
                  example: "Manhattan, New York"
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Location was updated."
                  lat:
                    type: number
                    format: float
                    example: 40.7500
                  lng:
                    type: number
                    format: float
                    example: -74.0000
              examples:
                coordinates:
                  value:
                    message: "Location was updated."
                address:
                  value:
                    message: "Location was updated."
                    lat: 40.7500
                    lng: -74.0000
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                noLocation:
                  value:
                    message: "Unable to update location. No location data provided."
                geocodeError:
                  value:
                    message: "Could not geocode the provided address."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to update location."

  /update_radius.php:
    post:
      tags:
        - Location
      summary: Update radius preference
      description: Update the current user's radius preference for matching
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - radius_preference
              properties:
                radius_preference:
                  type: integer
                  example: 30
      responses:
        '200':
          description: Radius preference updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Radius preference was updated."
              example:
                message: "Radius preference was updated."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to update radius preference. No radius provided."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Unable to update radius preference."

  /pusher_auth.php:
    post:
      tags:
        - Messaging
      summary: Authenticate Pusher channel
      description: Authenticate a private Pusher channel for real-time messaging
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - channel_name
                - socket_id
              properties:
                channel_name:
                  type: string
                  example: "private-match-1"
                socket_id:
                  type: string
                  example: "123.456"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth:
                    type: string
                    example: "pusher_app_key:auth_signature"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Access denied."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Not authorized to subscribe to this channel."

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User registration and login
  - name: User Profile
    description: User profile management
  - name: Activities
    description: Activity management
  - name: Matching
    description: User matching functionality
  - name: Matches
    description: Match management
  - name: Messaging
    description: Messaging functionality
  - name: Location
    description: Location management
